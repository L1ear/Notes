{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Linux/OpenSBI/","text":"\u57fa\u4e8eOpenSBI v1.3\u5bf9\u57fa\u672cboot\u6d41\u7a0b\u505a\u7b80\u8981\u89e3\u6790 fw_base.S OpenSBI\u4ece\u8fd9\u91cc\u8fdb\u5165\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e86 _start \u7b26\u53f7 (\u539f\u5b50\u6307\u4ee4\u53c2\u8003[1]) \uff0c\u5bf9\u4e8e\u975e\u542f\u52a8\u6838\uff0c\u4f1a\u4e00\u76f4\u7b49\u5f85\u77e5\u9053\u8fdb\u884cboot\u7684\u6838\u5b8c\u6210relocate\u4ee5\u53caboot\u7b49\u5de5\u4f5c\u540e\u624d\u8fdb\u5165 \u540e\u7eed\u6d41\u7a0b . .section .entry, \"ax\", %progbits .align 3 .globl _start .globl _start_warm _start: /* Find preferred boot HART id */ MOV_3R s0, a0, s1, a1, s2, a2 call fw_boot_hart //\u8fd9\u91cc\u6839\u636e\u6240\u9009\u62e9\u7684\u56fa\u4ef6\u7c7b\u578b\uff08jump\u3001dynamic\u3001payload\u51b3\u5b9a\uff09\uff0c\u5bf9\u4e8edynamic\u8fd4\u56de\u6267\u884cboot\u7684hartid\uff0c\u5176\u4ed6\u8fd4\u56de-1\uff1b add a6, a0, zero MOV_3R a0, s0, a1, s1, a2, s2 li a7, -1 beq a6, a7, _try_lottery //\u5982\u679c\u662fjump\u6216payload\u56fa\u4ef6\uff0c\u5219\u5c1d\u8bd5\u5f69\u7968\u7b97\u6cd5\u51b3\u5b9a\u6267\u884cboot\u7684hart /* Jump to relocation wait loop if we are not boot hart */ bne a0, a6, _wait_relocate_copy_done _try_lottery: /*2. \u539f\u5b50\u5199\u64cd\u4f5c\uff1a\u5148\u5c06(a6)\u4e2d\u7684\u5185\u5bb9\u8bb0\u4e3at\uff0c\u7136\u540e\u5c06a7+t\u7684\u5185\u5bb9\u5199\u5165(a6),\u7136\u540e\u628at\u5199\u5165a6 * \u5148\u6267\u884c\u7684hart\uff1aa7 \u4e3a 1\uff0c (a6) = _relocate_lottery = 1\uff0ca6=0 * \u540e\u6267\u884c\u7684hart\uff1a\u7531\u4e8e\u6bcf\u4e2acpu\u90fd\u6709\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u6240\u4ee5\u6b64\u65f6\u5f53\u524dcpu\u7684a6\u4f9d\u7136\u4e3a_relocate_lottery\u5730\u5740\uff0c\u4f46\u662f(a6)\u7684\u503c\u4e3a1\uff0c * \u6267\u884c\u540e a7\u4e3a1\uff0ca6) = _relocate_lottery = 2\uff0ca6=1 * \u603b\u7ed3\uff1a\u5148\u6267\u884camoadd.w a6, a7, (a6)\u6307\u4ee4\u7684cpu\u4f1a\u6210\u4e3a\u51b7\u542f\u52a8\u7684cpu\uff0c\u5176\u4ed6cpu\u4f1a\u8df3\u8f6c\u5230_wait_relocate_copy_done\u7b49\u5f85 */ /* Jump to relocation wait loop if we don't get relocation lottery */ lla a6, _relocate_lottery li a7, 1 amoadd.w a6, a7, (a6) bnez a6, _wait_relocate_copy_done _wait_relocate_copy_done: lla t0, _fw_start lla t1, _link_start REG_L t1, 0(t1) beq t0, t1, _wait_for_boot_hart //\u6b64\u5904\u6bd4\u8f83\u662f\u5426\u9700\u8981\u91cd\u5b9a\u4f4d\uff0c\u82e5\u4e0d\u9700\u8981\u5219\u76f4\u63a5\u7b49\u5f85\u8fdb\u884cboot\u7684hart lla t2, _boot_status lla t3, _wait_for_boot_hart sub t3, t3, t0 add t3, t3, t1 1: /* waitting for relocate copy done (_boot_status == 1) */ li t4, BOOT_STATUS_RELOCATE_DONE REG_L t5, 0(t2) /* Reduce the bus traffic so that boot hart may proceed faster */ nop nop nop bgt t4, t5, 1b jr t3 //\u8fd8\u662f\u8df3\u8f6c\u5230_wait_for_boot_hart #endif /* waiting for boot hart to be done (_boot_status == 2) */ _wait_for_boot_hart: li t0, BOOT_STATUS_BOOT_HART_DONE lla t1, _boot_status REG_L t1, 0(t1) /* Reduce the bus traffic so that boot hart may proceed faster */ div t2, t2, zero div t2, t2, zero div t2, t2, zero bne t0, t1, _wait_for_boot_hart \u63a5\u4e0b\u6765\u8fdb\u884cOpenSBI\u56fa\u4ef6\u7684\u91cd\u5b9a\u4f4d\uff1a /*\u83b7\u53d6SBI\u56fa\u4ef6\u81ea\u8eab\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u4ee5\u53ca\u5c06\u8981load\u7684\u5730\u5740*/ /* Save load address */ lla t0, _load_start lla t1, _fw_start REG_S t1, 0(t0) #ifdef FW_PIC \u00b7\u00b7\u00b7 //\u7531\u4e8e\u672a\u4f7f\u7528\u52a8\u6001\u94fe\u63a5\uff0c\u6b64\u5904\u4e0d\u8fc7\u591a\u4ecb\u7ecd #else /*\u6b64\u5904\u7531\u4e4b\u524d\u901a\u8fc7\u5f69\u7968\u7b97\u6cd5\u51b3\u5b9a\u7684hart\u8fdb\u884c\u91cd\u5b9a\u4f4d\uff0c\u5176\u4ed6hart\u8fdb\u5165_wait_for_boot_hart\u7b49\u5f85*/ /* Relocate if load address != link address */ _relocate: lla t0, _link_start REG_L t0, 0(t0) lla t1, _link_end REG_L t1, 0(t1) lla t2, _load_start REG_L t2, 0(t2) beq t0, t2, _relocate_done sub t3, t1, t0 add t3, t3, t2 lla t4, _relocate_done sub t4, t4, t2 add t4, t4, t0 blt t2, t0, _relocate_copy_to_upper _relocate_copy_to_lower: ble t1, t2, _relocate_copy_to_lower_loop lla t3, _relocate_lottery BRANGE t2, t1, t3, _start_hang lla t3, _boot_status BRANGE t2, t1, t3, _start_hang lla t3, _relocate lla t5, _relocate_done BRANGE t2, t1, t3, _start_hang BRANGE t2, t1, t5, _start_hang BRANGE t3, t5, t2, _start_hang _relocate_copy_to_lower_loop: REG_L t3, 0(t2) REG_S t3, 0(t0) add t0, t0, __SIZEOF_POINTER__ add t2, t2, __SIZEOF_POINTER__ blt t0, t1, _relocate_copy_to_lower_loop jr t4 _relocate_copy_to_upper: ble t3, t0, _relocate_copy_to_upper_loop lla t2, _relocate_lottery BRANGE t0, t3, t2, _start_hang lla t2, _boot_status BRANGE t0, t3, t2, _start_hang lla t2, _relocate lla t5, _relocate_done BRANGE t0, t3, t2, _start_hang BRANGE t0, t3, t5, _start_hang BRANGE t2, t5, t0, _start_hang _relocate_copy_to_upper_loop: add t3, t3, -__SIZEOF_POINTER__ add t1, t1, -__SIZEOF_POINTER__ REG_L t2, 0(t3) REG_S t2, 0(t1) blt t0, t1, _relocate_copy_to_upper_loop jr t4 //\u6b64\u5904jump\u7684\u5730\u5740\u662frelocate\u540e\u7684_relocate_done \u200b \u5728\u5b8c\u6210\u56fa\u4ef6\u7684relocate\u4e4b\u540e\u8df3\u8f6c\u5230t4\u5bc4\u5b58\u5668\u5b58\u50a8\u7684\u5730\u5740\uff0c\u4e5f\u5c31\u662frelocate\u540e\u7684_relocate_done\u5730\u5740\uff0c _relocate_done\u89c1\u4e0b _relocate_done: /* * Mark relocate copy done * Use _boot_status copy relative to the load address */ lla t0, _boot_status #ifndef FW_PIC lla t1, _link_start REG_L t1, 0(t1) lla t2, _load_start REG_L t2, 0(t2) sub t0, t0, t1 add t0, t0, t2 #endif li t1, BOOT_STATUS_RELOCATE_DONE //\u8fd9\u91cc\u5c06\u72b6\u6001\u6807\u5fd7\u8bbe\u7f6e\u4e3a\u5b8c\u6210\u91cd\u5b9a\u5411 REG_S t1, 0(t0) fence rw, rw /*\u63a5\u4e0b\u6765\u4ece\u91cd\u5b9a\u5411\u540e\u7684\u5730\u5740\u5f00\u59cb\u6267\u884c\u4e00\u7cfb\u5217\u521d\u59cb\u5316\uff0c\u5305\u62ec\uff1a * 1\u3001\u590d\u4f4d\u5904\u7406\u5668\u6240\u6709\u5bc4\u5b58\u5668\uff1b * 2\u3001\u6e05\u96f6BSS\u6bb5\uff1b * 3\u3001\u8bbe\u7f6e\u4e34\u65f6\u7684trap\u5730\u5740\uff1b * 4\u3001\u8bbe\u7f6e\u4e34\u65f6\u5806\u6808\uff1b * 5\u3001\u4fdd\u5b58\u56fa\u4ef6\u4fe1\u606f\uff08\u7981dynamic\u56fa\u4ef6\u4f7f\u7528\uff0c\u6b64\u5904\u8df3\u8fc7\u4ecb\u7ecd\uff09 */ /* At this point we are running from link address */ /* Reset all registers for boot HART */ li ra, 0 call _reset_regs /* Zero-out BSS */ lla s4, _bss_start lla s5, _bss_end _bss_zero: REG_S zero, (s4) add s4, s4, __SIZEOF_POINTER__ blt s4, s5, _bss_zero /* Setup temporary trap handler */ lla s4, _start_hang csrw CSR_MTVEC, s4 /* Setup temporary stack */ lla s4, _fw_end li s5, (SBI_SCRATCH_SIZE * 2) add sp, s4, s5 /* Allow main firmware to save info */ MOV_5R s0, a0, s1, a1, s2, a2, s3, a3, s4, a4 call fw_save_info MOV_5R a0, s0, a1, s1, a2, s2, a3, s3, a4, s4 /* * \u63a5\u4e0b\u6765\u5bf9\u8bbe\u5907\u6811\u8fdb\u884c\u5904\u7406\uff0c\u4e3b\u8981\u5728fw_platform_init()\u8fd9\u4e2aC\u51fd\u6570\u4e2d\u8fdb\u884c\u5904\u7406\uff0c\u7531\u4e0d\u540c\u7684platform\u51b3\u5b9a */ #ifdef FW_FDT_PATH /* Override previous arg1 */ lla a1, fw_fdt_bin #endif /* * Initialize platform * Note: The a0 to a4 registers passed to the * firmware are parameters to this function. */ MOV_5R s0, a0, s1, a1, s2, a2, s3, a3, s4, a4 call fw_platform_init add t0, a0, zero MOV_5R a0, s0, a1, s1, a2, s2, a3, s3, a4, s4 add a1, t0, zero /* * \u63d0\u524d\u4ece\u5185\u5b58\u4e2d\u52a0\u8f7d\u6bcf\u4e2ahart\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u6765\u81ea\u4e4b\u524d\u7684fw_platform_init() * Preload HART details * s7 -> HART Count * s8 -> HART Stack Size * s9 -> Heap Size * s10 -> Heap Offset */ lla a4, platform #if __riscv_xlen > 32 lwu s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4) lwu s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4) lwu s9, SBI_PLATFORM_HEAP_SIZE_OFFSET(a4) #else lw s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4) lw s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4) lw s9, SBI_PLATFORM_HEAP_SIZE_OFFSET(a4) #endif /* \u63a5\u4e0b\u6765\u4e3a\u6bcf\u4e2a\u6838\u5206\u914d\u5404\u81ea\u7684\u5806\u6808\u7b49 * \u4e00\u7cfb\u5217\u521d\u59cb\u5316\uff0c\u5e76\u8c03\u7528fw_options()\u51fd\u6570 */ /* Setup scratch space for all the HARTs*/ lla tp, _fw_end mul a5, s7, s8 add tp, tp, a5 /* Setup heap base address */ lla s10, _fw_start sub s10, tp, s10 add tp, tp, s9 /* Keep a copy of tp */ add t3, tp, zero /* Counter */ li t2, 1 /* hartid 0 is mandated by ISA */ li t1, 0 _scratch_init: /* * The following registers hold values that are computed before * entering this block, and should remain unchanged. * * t3 -> the firmware end address * s7 -> HART count * s8 -> HART stack size * s9 -> Heap Size * s10 -> Heap Offset */ add tp, t3, zero sub tp, tp, s9 mul a5, s8, t1 sub tp, tp, a5 li a5, SBI_SCRATCH_SIZE sub tp, tp, a5 /* Initialize scratch space */ /* Store fw_start and fw_size in scratch space */ lla a4, _fw_start sub a5, t3, a4 REG_S a4, SBI_SCRATCH_FW_START_OFFSET(tp) REG_S a5, SBI_SCRATCH_FW_SIZE_OFFSET(tp) /* Store R/W section's offset in scratch space */ lla a5, _fw_rw_start sub a5, a5, a4 REG_S a5, SBI_SCRATCH_FW_RW_OFFSET(tp) /* Store fw_heap_offset and fw_heap_size in scratch space */ REG_S s10, SBI_SCRATCH_FW_HEAP_OFFSET(tp) REG_S s9, SBI_SCRATCH_FW_HEAP_SIZE_OFFSET(tp) /* Store next arg1 in scratch space */ MOV_3R s0, a0, s1, a1, s2, a2 call fw_next_arg1 REG_S a0, SBI_SCRATCH_NEXT_ARG1_OFFSET(tp) MOV_3R a0, s0, a1, s1, a2, s2 /* Store next address in scratch space */ MOV_3R s0, a0, s1, a1, s2, a2 call fw_next_addr REG_S a0, SBI_SCRATCH_NEXT_ADDR_OFFSET(tp) MOV_3R a0, s0, a1, s1, a2, s2 /* Store next mode in scratch space */ MOV_3R s0, a0, s1, a1, s2, a2 call fw_next_mode REG_S a0, SBI_SCRATCH_NEXT_MODE_OFFSET(tp) MOV_3R a0, s0, a1, s1, a2, s2 /* Store warm_boot address in scratch space */ lla a4, _start_warm REG_S a4, SBI_SCRATCH_WARMBOOT_ADDR_OFFSET(tp) /* Store platform address in scratch space */ lla a4, platform REG_S a4, SBI_SCRATCH_PLATFORM_ADDR_OFFSET(tp) /* Store hartid-to-scratch function address in scratch space */ lla a4, _hartid_to_scratch REG_S a4, SBI_SCRATCH_HARTID_TO_SCRATCH_OFFSET(tp) /* Store trap-exit function address in scratch space */ lla a4, _trap_exit REG_S a4, SBI_SCRATCH_TRAP_EXIT_OFFSET(tp) /* Clear tmp0 in scratch space */ REG_S zero, SBI_SCRATCH_TMP0_OFFSET(tp) /* Store firmware options in scratch space */ MOV_3R s0, a0, s1, a1, s2, a2 #ifdef FW_OPTIONS li a0, FW_OPTIONS #else call fw_options #endif REG_S a0, SBI_SCRATCH_OPTIONS_OFFSET(tp) MOV_3R a0, s0, a1, s1, a2, s2 /* Move to next scratch space */ add t1, t1, t2 blt t1, s7, _scratch_init /* \u63a5\u4e0b\u6765\u662fFDT\u8bbe\u5907\u6811\u7684\u91cd\u5b9a\u4f4d\uff0c\u4e0e\u56fa\u4ef6\u7684\u91cd\u5b9a\u4f4d\u76f8\u4f3c\uff0c\u6b64\u5904\u7701\u7565*/ \u5728\u5b8c\u6210\u6240\u6709\u7684\u57fa\u672c\u521d\u59cb\u5316\u3001\u4ee5\u53ca\u56fa\u4ef6\u548c\u8bbe\u5907\u6811\u7684\u91cd\u5b9a\u4f4d\u540e\uff0c\u8fdb\u884cboot\u7684hart\u4ee5\u53ca\u7b49\u5f85\u4e2d\u7684harts\u90fd\u8fdb\u5165\u4e0b\u4e00\u4e2a\u9636\u6bb5\uff0c _start_warm , \u5b8c\u6210\u8fd9\u4e2a\u9636\u6bb5\u540e\u5c31\u8fdb\u5165\u4e86C\u7f16\u5199\u7684\u9ad8\u7ea7\u8bed\u8a00\u4e16\u754c\uff0c\u4e0d\u7528\u770b\u6c47\u7f16\u4e86www\u3002 \u8fd9\u4e2a\u9636\u6bb5\u4e3b\u8981\u505a\u4e86\u51e0\u4ef6\u5341\u5206\u91cd\u8981\u7684\u4e8b\u60c5\uff0c\u5305\u62ec\uff1a \u590d\u4f4d\u6240\u6709GPR\uff1b \u786e\u5b9a\u4e0d\u540chart\u7684\u5806\u6808\u5730\u5740\uff1b \u66f4\u65b0MSCRATH\u8fd9\u4e2aCSR\uff08\u4fdd\u5b58\u7684\u662ftp\u5bc4\u5b58\u5668\uff1f\uff1f\uff09\uff1b \u8bbe\u7f6e\u6b63\u5f0f\u7684trap\u5730\u5740\uff08\u5341\u5206\u91cd\u8981\uff01\uff01\uff01\uff09\uff0c\u51b3\u5b9a\u540e\u7eed\u7684\u5f02\u5e38\u5904\u7406\uff08\u5bf932\u4f4d\u5904\u7406\u5668\u7684Hypervisor\u6269\u5c55\u505a\u4e86\u5904\u7406\uff09\uff1b \u6700\u540e\u8df3\u8f6c\u81f3sbi_init()\u51fd\u6570\u8fdb\u884c\u4e0b\u4e00\u6b65\u7684\u521d\u59cb\u5316\u3002 _start_warm: /* Reset all registers for non-boot HARTs */ li ra, 0 call _reset_regs /* Disable all interrupts */ csrw CSR_MIE, zero /* Find HART count and HART stack size */ lla a4, platform #if __riscv_xlen == 64 lwu s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4) lwu s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4) #else lw s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4) lw s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4) #endif REG_L s9, SBI_PLATFORM_HART_INDEX2ID_OFFSET(a4) /* Find HART id */ csrr s6, CSR_MHARTID /* Find HART index */ beqz s9, 3f li a4, 0 1: #if __riscv_xlen == 64 lwu a5, (s9) #else lw a5, (s9) #endif beq a5, s6, 2f add s9, s9, 4 add a4, a4, 1 blt a4, s7, 1b 2: add s6, a4, zero 3: bge s6, s7, _start_hang /* Find the scratch space based on HART index */ lla tp, _fw_end mul a5, s7, s8 add tp, tp, a5 mul a5, s8, s6 sub tp, tp, a5 li a5, SBI_SCRATCH_SIZE sub tp, tp, a5 /* update the mscratch */ csrw CSR_MSCRATCH, tp /* Setup stack */ add sp, tp, zero /* Setup trap handler */ lla a4, _trap_handler #if __riscv_xlen == 32 csrr a5, CSR_MISA srli a5, a5, ('H' - 'A') andi a5, a5, 0x1 beq a5, zero, _skip_trap_handler_rv32_hyp lla a4, _trap_handler_rv32_hyp _skip_trap_handler_rv32_hyp: #endif csrw CSR_MTVEC, a4 #if __riscv_xlen == 32 /* Override trap exit for H-extension */ csrr a5, CSR_MISA srli a5, a5, ('H' - 'A') andi a5, a5, 0x1 beq a5, zero, _skip_trap_exit_rv32_hyp lla a4, _trap_exit_rv32_hyp csrr a5, CSR_MSCRATCH REG_S a4, SBI_SCRATCH_TRAP_EXIT_OFFSET(a5) _skip_trap_exit_rv32_hyp: #endif /* Initialize SBI runtime */ csrr a0, CSR_MSCRATCH call sbi_init /* We don't expect to reach here hence just hang */ j _start_hang sbi_init.c \u200b \u5728\u8fd9\u91cc\u5b8c\u6210\u4e00\u7cfb\u5217\u521d\u59cb\u5316\u540e\uff0c\u901a\u8fc7 sbi_hart_switch_mode() \u51fd\u6570\u8df3\u8f6c\u5230\u4e0b\u4e00boot\u9636\u6bb5\uff0c\u5e76\u8bbe\u7f6e\u597d\u673a\u5668\u72b6\u6001\uff08S\u3001U\uff09\u3002 \u200b \u5177\u4f53\u53ef\u4ee5\u9605\u8bfb\u6e90\u4ee3\u7801\uff0cC\u8bed\u8a00\u76f8\u5bf9\u8f83\u4e3a\u7b80\u5355\uff0c\u4ee5\u540e\u6709\u65f6\u95f4\u518d\u8865\u5145\u5427 \u9644\u5f55 [1] . \u539f\u5b50\u6307\u4ee4\uff1a\u6b64\u7c7b\u6307\u4ee4\u7528\u4e8e\u4ece \u5b58\u50a8\u5668 \uff08\u5730\u5740\u4e3a rs1 \u5bc4\u5b58\u5668\u7684\u503c\u6307\u5b9a\uff09\u4e2d\u8bfb\u51fa\u4e00\u4e2a\u6570\u636e\uff0c\u5b58\u653e\u81f3 rd \u5bc4\u5b58\u5668\u4e2d\uff0c\u5e76\u4e14\u5c06\u8bfb\u51fa\u7684\u6570\u636e\u4e0e rs2 \u5bc4\u5b58\u5668\u7684\u503c\u8fdb\u884c\u8ba1\u7b97\uff0c\u518d\u5c06\u8ba1\u7b97\u540e\u7684\u7ed3\u679c\u5199\u56de\u5b58\u50a8\u5668\uff08\u5b58\u50a8\u5668\u5199\u56de\u5730\u5740\u4e0e\u8bfb\u51fa\u5730\u5740\u76f8\u540c\uff09\u3002 [2]. \u90e8\u5206\u5185\u5bb9\u53c2\u8003\uff1ahttps://blog.csdn.net/dai_xiangjun/article/details/131815433","title":"OpenSBI"},{"location":"Linux/OpenSBI/#fw_bases","text":"OpenSBI\u4ece\u8fd9\u91cc\u8fdb\u5165\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e86 _start \u7b26\u53f7 (\u539f\u5b50\u6307\u4ee4\u53c2\u8003[1]) \uff0c\u5bf9\u4e8e\u975e\u542f\u52a8\u6838\uff0c\u4f1a\u4e00\u76f4\u7b49\u5f85\u77e5\u9053\u8fdb\u884cboot\u7684\u6838\u5b8c\u6210relocate\u4ee5\u53caboot\u7b49\u5de5\u4f5c\u540e\u624d\u8fdb\u5165 \u540e\u7eed\u6d41\u7a0b . .section .entry, \"ax\", %progbits .align 3 .globl _start .globl _start_warm _start: /* Find preferred boot HART id */ MOV_3R s0, a0, s1, a1, s2, a2 call fw_boot_hart //\u8fd9\u91cc\u6839\u636e\u6240\u9009\u62e9\u7684\u56fa\u4ef6\u7c7b\u578b\uff08jump\u3001dynamic\u3001payload\u51b3\u5b9a\uff09\uff0c\u5bf9\u4e8edynamic\u8fd4\u56de\u6267\u884cboot\u7684hartid\uff0c\u5176\u4ed6\u8fd4\u56de-1\uff1b add a6, a0, zero MOV_3R a0, s0, a1, s1, a2, s2 li a7, -1 beq a6, a7, _try_lottery //\u5982\u679c\u662fjump\u6216payload\u56fa\u4ef6\uff0c\u5219\u5c1d\u8bd5\u5f69\u7968\u7b97\u6cd5\u51b3\u5b9a\u6267\u884cboot\u7684hart /* Jump to relocation wait loop if we are not boot hart */ bne a0, a6, _wait_relocate_copy_done _try_lottery: /*2. \u539f\u5b50\u5199\u64cd\u4f5c\uff1a\u5148\u5c06(a6)\u4e2d\u7684\u5185\u5bb9\u8bb0\u4e3at\uff0c\u7136\u540e\u5c06a7+t\u7684\u5185\u5bb9\u5199\u5165(a6),\u7136\u540e\u628at\u5199\u5165a6 * \u5148\u6267\u884c\u7684hart\uff1aa7 \u4e3a 1\uff0c (a6) = _relocate_lottery = 1\uff0ca6=0 * \u540e\u6267\u884c\u7684hart\uff1a\u7531\u4e8e\u6bcf\u4e2acpu\u90fd\u6709\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u6240\u4ee5\u6b64\u65f6\u5f53\u524dcpu\u7684a6\u4f9d\u7136\u4e3a_relocate_lottery\u5730\u5740\uff0c\u4f46\u662f(a6)\u7684\u503c\u4e3a1\uff0c * \u6267\u884c\u540e a7\u4e3a1\uff0ca6) = _relocate_lottery = 2\uff0ca6=1 * \u603b\u7ed3\uff1a\u5148\u6267\u884camoadd.w a6, a7, (a6)\u6307\u4ee4\u7684cpu\u4f1a\u6210\u4e3a\u51b7\u542f\u52a8\u7684cpu\uff0c\u5176\u4ed6cpu\u4f1a\u8df3\u8f6c\u5230_wait_relocate_copy_done\u7b49\u5f85 */ /* Jump to relocation wait loop if we don't get relocation lottery */ lla a6, _relocate_lottery li a7, 1 amoadd.w a6, a7, (a6) bnez a6, _wait_relocate_copy_done _wait_relocate_copy_done: lla t0, _fw_start lla t1, _link_start REG_L t1, 0(t1) beq t0, t1, _wait_for_boot_hart //\u6b64\u5904\u6bd4\u8f83\u662f\u5426\u9700\u8981\u91cd\u5b9a\u4f4d\uff0c\u82e5\u4e0d\u9700\u8981\u5219\u76f4\u63a5\u7b49\u5f85\u8fdb\u884cboot\u7684hart lla t2, _boot_status lla t3, _wait_for_boot_hart sub t3, t3, t0 add t3, t3, t1 1: /* waitting for relocate copy done (_boot_status == 1) */ li t4, BOOT_STATUS_RELOCATE_DONE REG_L t5, 0(t2) /* Reduce the bus traffic so that boot hart may proceed faster */ nop nop nop bgt t4, t5, 1b jr t3 //\u8fd8\u662f\u8df3\u8f6c\u5230_wait_for_boot_hart #endif /* waiting for boot hart to be done (_boot_status == 2) */ _wait_for_boot_hart: li t0, BOOT_STATUS_BOOT_HART_DONE lla t1, _boot_status REG_L t1, 0(t1) /* Reduce the bus traffic so that boot hart may proceed faster */ div t2, t2, zero div t2, t2, zero div t2, t2, zero bne t0, t1, _wait_for_boot_hart \u63a5\u4e0b\u6765\u8fdb\u884cOpenSBI\u56fa\u4ef6\u7684\u91cd\u5b9a\u4f4d\uff1a /*\u83b7\u53d6SBI\u56fa\u4ef6\u81ea\u8eab\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u4ee5\u53ca\u5c06\u8981load\u7684\u5730\u5740*/ /* Save load address */ lla t0, _load_start lla t1, _fw_start REG_S t1, 0(t0) #ifdef FW_PIC \u00b7\u00b7\u00b7 //\u7531\u4e8e\u672a\u4f7f\u7528\u52a8\u6001\u94fe\u63a5\uff0c\u6b64\u5904\u4e0d\u8fc7\u591a\u4ecb\u7ecd #else /*\u6b64\u5904\u7531\u4e4b\u524d\u901a\u8fc7\u5f69\u7968\u7b97\u6cd5\u51b3\u5b9a\u7684hart\u8fdb\u884c\u91cd\u5b9a\u4f4d\uff0c\u5176\u4ed6hart\u8fdb\u5165_wait_for_boot_hart\u7b49\u5f85*/ /* Relocate if load address != link address */ _relocate: lla t0, _link_start REG_L t0, 0(t0) lla t1, _link_end REG_L t1, 0(t1) lla t2, _load_start REG_L t2, 0(t2) beq t0, t2, _relocate_done sub t3, t1, t0 add t3, t3, t2 lla t4, _relocate_done sub t4, t4, t2 add t4, t4, t0 blt t2, t0, _relocate_copy_to_upper _relocate_copy_to_lower: ble t1, t2, _relocate_copy_to_lower_loop lla t3, _relocate_lottery BRANGE t2, t1, t3, _start_hang lla t3, _boot_status BRANGE t2, t1, t3, _start_hang lla t3, _relocate lla t5, _relocate_done BRANGE t2, t1, t3, _start_hang BRANGE t2, t1, t5, _start_hang BRANGE t3, t5, t2, _start_hang _relocate_copy_to_lower_loop: REG_L t3, 0(t2) REG_S t3, 0(t0) add t0, t0, __SIZEOF_POINTER__ add t2, t2, __SIZEOF_POINTER__ blt t0, t1, _relocate_copy_to_lower_loop jr t4 _relocate_copy_to_upper: ble t3, t0, _relocate_copy_to_upper_loop lla t2, _relocate_lottery BRANGE t0, t3, t2, _start_hang lla t2, _boot_status BRANGE t0, t3, t2, _start_hang lla t2, _relocate lla t5, _relocate_done BRANGE t0, t3, t2, _start_hang BRANGE t0, t3, t5, _start_hang BRANGE t2, t5, t0, _start_hang _relocate_copy_to_upper_loop: add t3, t3, -__SIZEOF_POINTER__ add t1, t1, -__SIZEOF_POINTER__ REG_L t2, 0(t3) REG_S t2, 0(t1) blt t0, t1, _relocate_copy_to_upper_loop jr t4 //\u6b64\u5904jump\u7684\u5730\u5740\u662frelocate\u540e\u7684_relocate_done \u200b \u5728\u5b8c\u6210\u56fa\u4ef6\u7684relocate\u4e4b\u540e\u8df3\u8f6c\u5230t4\u5bc4\u5b58\u5668\u5b58\u50a8\u7684\u5730\u5740\uff0c\u4e5f\u5c31\u662frelocate\u540e\u7684_relocate_done\u5730\u5740\uff0c _relocate_done\u89c1\u4e0b _relocate_done: /* * Mark relocate copy done * Use _boot_status copy relative to the load address */ lla t0, _boot_status #ifndef FW_PIC lla t1, _link_start REG_L t1, 0(t1) lla t2, _load_start REG_L t2, 0(t2) sub t0, t0, t1 add t0, t0, t2 #endif li t1, BOOT_STATUS_RELOCATE_DONE //\u8fd9\u91cc\u5c06\u72b6\u6001\u6807\u5fd7\u8bbe\u7f6e\u4e3a\u5b8c\u6210\u91cd\u5b9a\u5411 REG_S t1, 0(t0) fence rw, rw /*\u63a5\u4e0b\u6765\u4ece\u91cd\u5b9a\u5411\u540e\u7684\u5730\u5740\u5f00\u59cb\u6267\u884c\u4e00\u7cfb\u5217\u521d\u59cb\u5316\uff0c\u5305\u62ec\uff1a * 1\u3001\u590d\u4f4d\u5904\u7406\u5668\u6240\u6709\u5bc4\u5b58\u5668\uff1b * 2\u3001\u6e05\u96f6BSS\u6bb5\uff1b * 3\u3001\u8bbe\u7f6e\u4e34\u65f6\u7684trap\u5730\u5740\uff1b * 4\u3001\u8bbe\u7f6e\u4e34\u65f6\u5806\u6808\uff1b * 5\u3001\u4fdd\u5b58\u56fa\u4ef6\u4fe1\u606f\uff08\u7981dynamic\u56fa\u4ef6\u4f7f\u7528\uff0c\u6b64\u5904\u8df3\u8fc7\u4ecb\u7ecd\uff09 */ /* At this point we are running from link address */ /* Reset all registers for boot HART */ li ra, 0 call _reset_regs /* Zero-out BSS */ lla s4, _bss_start lla s5, _bss_end _bss_zero: REG_S zero, (s4) add s4, s4, __SIZEOF_POINTER__ blt s4, s5, _bss_zero /* Setup temporary trap handler */ lla s4, _start_hang csrw CSR_MTVEC, s4 /* Setup temporary stack */ lla s4, _fw_end li s5, (SBI_SCRATCH_SIZE * 2) add sp, s4, s5 /* Allow main firmware to save info */ MOV_5R s0, a0, s1, a1, s2, a2, s3, a3, s4, a4 call fw_save_info MOV_5R a0, s0, a1, s1, a2, s2, a3, s3, a4, s4 /* * \u63a5\u4e0b\u6765\u5bf9\u8bbe\u5907\u6811\u8fdb\u884c\u5904\u7406\uff0c\u4e3b\u8981\u5728fw_platform_init()\u8fd9\u4e2aC\u51fd\u6570\u4e2d\u8fdb\u884c\u5904\u7406\uff0c\u7531\u4e0d\u540c\u7684platform\u51b3\u5b9a */ #ifdef FW_FDT_PATH /* Override previous arg1 */ lla a1, fw_fdt_bin #endif /* * Initialize platform * Note: The a0 to a4 registers passed to the * firmware are parameters to this function. */ MOV_5R s0, a0, s1, a1, s2, a2, s3, a3, s4, a4 call fw_platform_init add t0, a0, zero MOV_5R a0, s0, a1, s1, a2, s2, a3, s3, a4, s4 add a1, t0, zero /* * \u63d0\u524d\u4ece\u5185\u5b58\u4e2d\u52a0\u8f7d\u6bcf\u4e2ahart\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u6765\u81ea\u4e4b\u524d\u7684fw_platform_init() * Preload HART details * s7 -> HART Count * s8 -> HART Stack Size * s9 -> Heap Size * s10 -> Heap Offset */ lla a4, platform #if __riscv_xlen > 32 lwu s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4) lwu s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4) lwu s9, SBI_PLATFORM_HEAP_SIZE_OFFSET(a4) #else lw s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4) lw s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4) lw s9, SBI_PLATFORM_HEAP_SIZE_OFFSET(a4) #endif /* \u63a5\u4e0b\u6765\u4e3a\u6bcf\u4e2a\u6838\u5206\u914d\u5404\u81ea\u7684\u5806\u6808\u7b49 * \u4e00\u7cfb\u5217\u521d\u59cb\u5316\uff0c\u5e76\u8c03\u7528fw_options()\u51fd\u6570 */ /* Setup scratch space for all the HARTs*/ lla tp, _fw_end mul a5, s7, s8 add tp, tp, a5 /* Setup heap base address */ lla s10, _fw_start sub s10, tp, s10 add tp, tp, s9 /* Keep a copy of tp */ add t3, tp, zero /* Counter */ li t2, 1 /* hartid 0 is mandated by ISA */ li t1, 0 _scratch_init: /* * The following registers hold values that are computed before * entering this block, and should remain unchanged. * * t3 -> the firmware end address * s7 -> HART count * s8 -> HART stack size * s9 -> Heap Size * s10 -> Heap Offset */ add tp, t3, zero sub tp, tp, s9 mul a5, s8, t1 sub tp, tp, a5 li a5, SBI_SCRATCH_SIZE sub tp, tp, a5 /* Initialize scratch space */ /* Store fw_start and fw_size in scratch space */ lla a4, _fw_start sub a5, t3, a4 REG_S a4, SBI_SCRATCH_FW_START_OFFSET(tp) REG_S a5, SBI_SCRATCH_FW_SIZE_OFFSET(tp) /* Store R/W section's offset in scratch space */ lla a5, _fw_rw_start sub a5, a5, a4 REG_S a5, SBI_SCRATCH_FW_RW_OFFSET(tp) /* Store fw_heap_offset and fw_heap_size in scratch space */ REG_S s10, SBI_SCRATCH_FW_HEAP_OFFSET(tp) REG_S s9, SBI_SCRATCH_FW_HEAP_SIZE_OFFSET(tp) /* Store next arg1 in scratch space */ MOV_3R s0, a0, s1, a1, s2, a2 call fw_next_arg1 REG_S a0, SBI_SCRATCH_NEXT_ARG1_OFFSET(tp) MOV_3R a0, s0, a1, s1, a2, s2 /* Store next address in scratch space */ MOV_3R s0, a0, s1, a1, s2, a2 call fw_next_addr REG_S a0, SBI_SCRATCH_NEXT_ADDR_OFFSET(tp) MOV_3R a0, s0, a1, s1, a2, s2 /* Store next mode in scratch space */ MOV_3R s0, a0, s1, a1, s2, a2 call fw_next_mode REG_S a0, SBI_SCRATCH_NEXT_MODE_OFFSET(tp) MOV_3R a0, s0, a1, s1, a2, s2 /* Store warm_boot address in scratch space */ lla a4, _start_warm REG_S a4, SBI_SCRATCH_WARMBOOT_ADDR_OFFSET(tp) /* Store platform address in scratch space */ lla a4, platform REG_S a4, SBI_SCRATCH_PLATFORM_ADDR_OFFSET(tp) /* Store hartid-to-scratch function address in scratch space */ lla a4, _hartid_to_scratch REG_S a4, SBI_SCRATCH_HARTID_TO_SCRATCH_OFFSET(tp) /* Store trap-exit function address in scratch space */ lla a4, _trap_exit REG_S a4, SBI_SCRATCH_TRAP_EXIT_OFFSET(tp) /* Clear tmp0 in scratch space */ REG_S zero, SBI_SCRATCH_TMP0_OFFSET(tp) /* Store firmware options in scratch space */ MOV_3R s0, a0, s1, a1, s2, a2 #ifdef FW_OPTIONS li a0, FW_OPTIONS #else call fw_options #endif REG_S a0, SBI_SCRATCH_OPTIONS_OFFSET(tp) MOV_3R a0, s0, a1, s1, a2, s2 /* Move to next scratch space */ add t1, t1, t2 blt t1, s7, _scratch_init /* \u63a5\u4e0b\u6765\u662fFDT\u8bbe\u5907\u6811\u7684\u91cd\u5b9a\u4f4d\uff0c\u4e0e\u56fa\u4ef6\u7684\u91cd\u5b9a\u4f4d\u76f8\u4f3c\uff0c\u6b64\u5904\u7701\u7565*/ \u5728\u5b8c\u6210\u6240\u6709\u7684\u57fa\u672c\u521d\u59cb\u5316\u3001\u4ee5\u53ca\u56fa\u4ef6\u548c\u8bbe\u5907\u6811\u7684\u91cd\u5b9a\u4f4d\u540e\uff0c\u8fdb\u884cboot\u7684hart\u4ee5\u53ca\u7b49\u5f85\u4e2d\u7684harts\u90fd\u8fdb\u5165\u4e0b\u4e00\u4e2a\u9636\u6bb5\uff0c _start_warm , \u5b8c\u6210\u8fd9\u4e2a\u9636\u6bb5\u540e\u5c31\u8fdb\u5165\u4e86C\u7f16\u5199\u7684\u9ad8\u7ea7\u8bed\u8a00\u4e16\u754c\uff0c\u4e0d\u7528\u770b\u6c47\u7f16\u4e86www\u3002 \u8fd9\u4e2a\u9636\u6bb5\u4e3b\u8981\u505a\u4e86\u51e0\u4ef6\u5341\u5206\u91cd\u8981\u7684\u4e8b\u60c5\uff0c\u5305\u62ec\uff1a \u590d\u4f4d\u6240\u6709GPR\uff1b \u786e\u5b9a\u4e0d\u540chart\u7684\u5806\u6808\u5730\u5740\uff1b \u66f4\u65b0MSCRATH\u8fd9\u4e2aCSR\uff08\u4fdd\u5b58\u7684\u662ftp\u5bc4\u5b58\u5668\uff1f\uff1f\uff09\uff1b \u8bbe\u7f6e\u6b63\u5f0f\u7684trap\u5730\u5740\uff08\u5341\u5206\u91cd\u8981\uff01\uff01\uff01\uff09\uff0c\u51b3\u5b9a\u540e\u7eed\u7684\u5f02\u5e38\u5904\u7406\uff08\u5bf932\u4f4d\u5904\u7406\u5668\u7684Hypervisor\u6269\u5c55\u505a\u4e86\u5904\u7406\uff09\uff1b \u6700\u540e\u8df3\u8f6c\u81f3sbi_init()\u51fd\u6570\u8fdb\u884c\u4e0b\u4e00\u6b65\u7684\u521d\u59cb\u5316\u3002 _start_warm: /* Reset all registers for non-boot HARTs */ li ra, 0 call _reset_regs /* Disable all interrupts */ csrw CSR_MIE, zero /* Find HART count and HART stack size */ lla a4, platform #if __riscv_xlen == 64 lwu s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4) lwu s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4) #else lw s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4) lw s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4) #endif REG_L s9, SBI_PLATFORM_HART_INDEX2ID_OFFSET(a4) /* Find HART id */ csrr s6, CSR_MHARTID /* Find HART index */ beqz s9, 3f li a4, 0 1: #if __riscv_xlen == 64 lwu a5, (s9) #else lw a5, (s9) #endif beq a5, s6, 2f add s9, s9, 4 add a4, a4, 1 blt a4, s7, 1b 2: add s6, a4, zero 3: bge s6, s7, _start_hang /* Find the scratch space based on HART index */ lla tp, _fw_end mul a5, s7, s8 add tp, tp, a5 mul a5, s8, s6 sub tp, tp, a5 li a5, SBI_SCRATCH_SIZE sub tp, tp, a5 /* update the mscratch */ csrw CSR_MSCRATCH, tp /* Setup stack */ add sp, tp, zero /* Setup trap handler */ lla a4, _trap_handler #if __riscv_xlen == 32 csrr a5, CSR_MISA srli a5, a5, ('H' - 'A') andi a5, a5, 0x1 beq a5, zero, _skip_trap_handler_rv32_hyp lla a4, _trap_handler_rv32_hyp _skip_trap_handler_rv32_hyp: #endif csrw CSR_MTVEC, a4 #if __riscv_xlen == 32 /* Override trap exit for H-extension */ csrr a5, CSR_MISA srli a5, a5, ('H' - 'A') andi a5, a5, 0x1 beq a5, zero, _skip_trap_exit_rv32_hyp lla a4, _trap_exit_rv32_hyp csrr a5, CSR_MSCRATCH REG_S a4, SBI_SCRATCH_TRAP_EXIT_OFFSET(a5) _skip_trap_exit_rv32_hyp: #endif /* Initialize SBI runtime */ csrr a0, CSR_MSCRATCH call sbi_init /* We don't expect to reach here hence just hang */ j _start_hang","title":"fw_base.S"},{"location":"Linux/OpenSBI/#sbi_initc","text":"\u200b \u5728\u8fd9\u91cc\u5b8c\u6210\u4e00\u7cfb\u5217\u521d\u59cb\u5316\u540e\uff0c\u901a\u8fc7 sbi_hart_switch_mode() \u51fd\u6570\u8df3\u8f6c\u5230\u4e0b\u4e00boot\u9636\u6bb5\uff0c\u5e76\u8bbe\u7f6e\u597d\u673a\u5668\u72b6\u6001\uff08S\u3001U\uff09\u3002 \u200b \u5177\u4f53\u53ef\u4ee5\u9605\u8bfb\u6e90\u4ee3\u7801\uff0cC\u8bed\u8a00\u76f8\u5bf9\u8f83\u4e3a\u7b80\u5355\uff0c\u4ee5\u540e\u6709\u65f6\u95f4\u518d\u8865\u5145\u5427","title":"sbi_init.c"},{"location":"Linux/OpenSBI/#_1","text":"[1] . \u539f\u5b50\u6307\u4ee4\uff1a\u6b64\u7c7b\u6307\u4ee4\u7528\u4e8e\u4ece \u5b58\u50a8\u5668 \uff08\u5730\u5740\u4e3a rs1 \u5bc4\u5b58\u5668\u7684\u503c\u6307\u5b9a\uff09\u4e2d\u8bfb\u51fa\u4e00\u4e2a\u6570\u636e\uff0c\u5b58\u653e\u81f3 rd \u5bc4\u5b58\u5668\u4e2d\uff0c\u5e76\u4e14\u5c06\u8bfb\u51fa\u7684\u6570\u636e\u4e0e rs2 \u5bc4\u5b58\u5668\u7684\u503c\u8fdb\u884c\u8ba1\u7b97\uff0c\u518d\u5c06\u8ba1\u7b97\u540e\u7684\u7ed3\u679c\u5199\u56de\u5b58\u50a8\u5668\uff08\u5b58\u50a8\u5668\u5199\u56de\u5730\u5740\u4e0e\u8bfb\u51fa\u5730\u5740\u76f8\u540c\uff09\u3002 [2]. \u90e8\u5206\u5185\u5bb9\u53c2\u8003\uff1ahttps://blog.csdn.net/dai_xiangjun/article/details/131815433","title":"\u9644\u5f55"},{"location":"infos/about/","text":"","title":"About"},{"location":"infos/license/","text":"","title":"License"}]}