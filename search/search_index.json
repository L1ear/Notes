{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Linux/OpenSBI/","title":"OpenSBI","text":"<p>\u57fa\u4e8eOpenSBI v1.3\u5bf9\u57fa\u672cboot\u6d41\u7a0b\u505a\u7b80\u8981\u89e3\u6790</p> <p></p>"},{"location":"Linux/OpenSBI/#fw_bases","title":"fw_base.S","text":"<p>OpenSBI\u4ece\u8fd9\u91cc\u8fdb\u5165\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e86 <code>_start</code>\u7b26\u53f7(\u539f\u5b50\u6307\u4ee4\u53c2\u8003[1])\uff0c\u5bf9\u4e8e\u975e\u542f\u52a8\u6838\uff0c\u4f1a\u4e00\u76f4\u7b49\u5f85\u77e5\u9053\u8fdb\u884cboot\u7684\u6838\u5b8c\u6210relocate\u4ee5\u53caboot\u7b49\u5de5\u4f5c\u540e\u624d\u8fdb\u5165\u540e\u7eed\u6d41\u7a0b.</p> <pre><code>    .section .entry, \"ax\", %progbits\n    .align 3\n    .globl _start\n    .globl _start_warm\n_start:\n    /* Find preferred boot HART id */\n    MOV_3R  s0, a0, s1, a1, s2, a2\n    call    fw_boot_hart            //\u8fd9\u91cc\u6839\u636e\u6240\u9009\u62e9\u7684\u56fa\u4ef6\u7c7b\u578b\uff08jump\u3001dynamic\u3001payload\u51b3\u5b9a\uff09\uff0c\u5bf9\u4e8edynamic\u8fd4\u56de\u6267\u884cboot\u7684hartid\uff0c\u5176\u4ed6\u8fd4\u56de-1\uff1b\n    add a6, a0, zero\n    MOV_3R  a0, s0, a1, s1, a2, s2\n    li  a7, -1\n    beq a6, a7, _try_lottery        //\u5982\u679c\u662fjump\u6216payload\u56fa\u4ef6\uff0c\u5219\u5c1d\u8bd5\u5f69\u7968\u7b97\u6cd5\u51b3\u5b9a\u6267\u884cboot\u7684hart\n    /* Jump to relocation wait loop if we are not boot hart */\n    bne a0, a6, _wait_relocate_copy_done\n_try_lottery:\n    /*2. \u539f\u5b50\u5199\u64cd\u4f5c\uff1a\u5148\u5c06(a6)\u4e2d\u7684\u5185\u5bb9\u8bb0\u4e3at\uff0c\u7136\u540e\u5c06a7+t\u7684\u5185\u5bb9\u5199\u5165(a6),\u7136\u540e\u628at\u5199\u5165a6\n     *   \u5148\u6267\u884c\u7684hart\uff1aa7 \u4e3a 1\uff0c (a6) = _relocate_lottery = 1\uff0ca6=0\n     *   \u540e\u6267\u884c\u7684hart\uff1a\u7531\u4e8e\u6bcf\u4e2acpu\u90fd\u6709\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u6240\u4ee5\u6b64\u65f6\u5f53\u524dcpu\u7684a6\u4f9d\u7136\u4e3a_relocate_lottery\u5730\u5740\uff0c\u4f46\u662f(a6)\u7684\u503c\u4e3a1\uff0c \n     *                          \u6267\u884c\u540e a7\u4e3a1\uff0ca6) = _relocate_lottery = 2\uff0ca6=1\n     * \u603b\u7ed3\uff1a\u5148\u6267\u884camoadd.w a6, a7, (a6)\u6307\u4ee4\u7684cpu\u4f1a\u6210\u4e3a\u51b7\u542f\u52a8\u7684cpu\uff0c\u5176\u4ed6cpu\u4f1a\u8df3\u8f6c\u5230_wait_relocate_copy_done\u7b49\u5f85\n     */\n    /* Jump to relocation wait loop if we don't get relocation lottery */\n    lla a6, _relocate_lottery\n    li  a7, 1\n    amoadd.w a6, a7, (a6)\n    bnez    a6, _wait_relocate_copy_done\n\n_wait_relocate_copy_done:\n    lla t0, _fw_start\n    lla t1, _link_start\n    REG_L   t1, 0(t1)\n    beq t0, t1, _wait_for_boot_hart         //\u6b64\u5904\u6bd4\u8f83\u662f\u5426\u9700\u8981\u91cd\u5b9a\u4f4d\uff0c\u82e5\u4e0d\u9700\u8981\u5219\u76f4\u63a5\u7b49\u5f85\u8fdb\u884cboot\u7684hart\n    lla t2, _boot_status\n    lla t3, _wait_for_boot_hart\n    sub t3, t3, t0\n    add t3, t3, t1\n1:\n    /* waitting for relocate copy done (_boot_status == 1) */\n    li  t4, BOOT_STATUS_RELOCATE_DONE\n    REG_L   t5, 0(t2)\n    /* Reduce the bus traffic so that boot hart may proceed faster */\n    nop\n    nop\n    nop\n    bgt     t4, t5, 1b\n    jr  t3                                  //\u8fd8\u662f\u8df3\u8f6c\u5230_wait_for_boot_hart\n#endif\n\n    /* waiting for boot hart to be done (_boot_status == 2) */\n_wait_for_boot_hart:\n    li  t0, BOOT_STATUS_BOOT_HART_DONE\n    lla t1, _boot_status\n    REG_L   t1, 0(t1)\n    /* Reduce the bus traffic so that boot hart may proceed faster */\n    div t2, t2, zero\n    div t2, t2, zero\n    div t2, t2, zero\n    bne t0, t1, _wait_for_boot_hart\n</code></pre> <p>\u63a5\u4e0b\u6765\u8fdb\u884cOpenSBI\u56fa\u4ef6\u7684\u91cd\u5b9a\u4f4d\uff1a</p> <pre><code>    /*\u83b7\u53d6SBI\u56fa\u4ef6\u81ea\u8eab\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u4ee5\u53ca\u5c06\u8981load\u7684\u5730\u5740*/\n    /* Save load address */\n    lla t0, _load_start\n    lla t1, _fw_start\n    REG_S   t1, 0(t0)\n#ifdef FW_PIC\n\u00b7\u00b7\u00b7                 //\u7531\u4e8e\u672a\u4f7f\u7528\u52a8\u6001\u94fe\u63a5\uff0c\u6b64\u5904\u4e0d\u8fc7\u591a\u4ecb\u7ecd\n#else\n    /*\u6b64\u5904\u7531\u4e4b\u524d\u901a\u8fc7\u5f69\u7968\u7b97\u6cd5\u51b3\u5b9a\u7684hart\u8fdb\u884c\u91cd\u5b9a\u4f4d\uff0c\u5176\u4ed6hart\u8fdb\u5165_wait_for_boot_hart\u7b49\u5f85*/\n    /* Relocate if load address != link address */\n_relocate:\n    lla t0, _link_start\n    REG_L   t0, 0(t0)\n    lla t1, _link_end\n    REG_L   t1, 0(t1)\n    lla t2, _load_start\n    REG_L   t2, 0(t2)\n    beq t0, t2, _relocate_done\n    sub t3, t1, t0\n    add t3, t3, t2\n    lla t4, _relocate_done\n    sub t4, t4, t2\n    add t4, t4, t0\n    blt t2, t0, _relocate_copy_to_upper\n_relocate_copy_to_lower:\n    ble t1, t2, _relocate_copy_to_lower_loop\n    lla t3, _relocate_lottery\n    BRANGE  t2, t1, t3, _start_hang\n    lla t3, _boot_status\n    BRANGE  t2, t1, t3, _start_hang\n    lla t3, _relocate\n    lla t5, _relocate_done\n    BRANGE  t2, t1, t3, _start_hang\n    BRANGE  t2, t1, t5, _start_hang\n    BRANGE  t3, t5, t2, _start_hang\n_relocate_copy_to_lower_loop:\n    REG_L   t3, 0(t2)\n    REG_S   t3, 0(t0)\n    add t0, t0, __SIZEOF_POINTER__\n    add t2, t2, __SIZEOF_POINTER__\n    blt t0, t1, _relocate_copy_to_lower_loop\n    jr  t4\n_relocate_copy_to_upper:\n    ble t3, t0, _relocate_copy_to_upper_loop\n    lla t2, _relocate_lottery\n    BRANGE  t0, t3, t2, _start_hang\n    lla t2, _boot_status\n    BRANGE  t0, t3, t2, _start_hang\n    lla t2, _relocate\n    lla t5, _relocate_done\n    BRANGE  t0, t3, t2, _start_hang\n    BRANGE  t0, t3, t5, _start_hang\n    BRANGE  t2, t5, t0, _start_hang\n_relocate_copy_to_upper_loop:\n    add t3, t3, -__SIZEOF_POINTER__\n    add t1, t1, -__SIZEOF_POINTER__\n    REG_L   t2, 0(t3)\n    REG_S   t2, 0(t1)\n    blt t0, t1, _relocate_copy_to_upper_loop\n    jr  t4                      //\u6b64\u5904jump\u7684\u5730\u5740\u662frelocate\u540e\u7684_relocate_done\n</code></pre> <p>\u5728\u5b8c\u6210\u56fa\u4ef6\u7684relocate\u4e4b\u540e\u8df3\u8f6c\u5230t4\u5bc4\u5b58\u5668\u5b58\u50a8\u7684\u5730\u5740\uff0c\u4e5f\u5c31\u662frelocate\u540e\u7684_relocate_done\u5730\u5740\uff0c _relocate_done\u89c1\u4e0b:</p> <pre><code>_relocate_done:\n    /*\n     * Mark relocate copy done\n     * Use _boot_status copy relative to the load address\n     */\n    lla t0, _boot_status\n#ifndef FW_PIC\n    lla t1, _link_start\n    REG_L   t1, 0(t1)\n    lla t2, _load_start\n    REG_L   t2, 0(t2)\n    sub t0, t0, t1\n    add t0, t0, t2\n#endif\n    li  t1, BOOT_STATUS_RELOCATE_DONE       //\u8fd9\u91cc\u5c06\u72b6\u6001\u6807\u5fd7\u8bbe\u7f6e\u4e3a\u5b8c\u6210\u91cd\u5b9a\u5411\n    REG_S   t1, 0(t0)\n    fence   rw, rw\n\n    /*\u63a5\u4e0b\u6765\u4ece\u91cd\u5b9a\u5411\u540e\u7684\u5730\u5740\u5f00\u59cb\u6267\u884c\u4e00\u7cfb\u5217\u521d\u59cb\u5316\uff0c\u5305\u62ec\uff1a\n    *   1\u3001\u590d\u4f4d\u5904\u7406\u5668\u6240\u6709\u5bc4\u5b58\u5668\uff1b\n    *   2\u3001\u6e05\u96f6BSS\u6bb5\uff1b\n    *   3\u3001\u8bbe\u7f6e\u4e34\u65f6\u7684trap\u5730\u5740\uff1b\n    *   4\u3001\u8bbe\u7f6e\u4e34\u65f6\u5806\u6808\uff1b\n    *   5\u3001\u4fdd\u5b58\u56fa\u4ef6\u4fe1\u606f\uff08\u7981dynamic\u56fa\u4ef6\u4f7f\u7528\uff0c\u6b64\u5904\u8df3\u8fc7\u4ecb\u7ecd\uff09\n    */\n\n    /* At this point we are running from link address */\n\n    /* Reset all registers for boot HART */\n    li  ra, 0\n    call    _reset_regs\n    /* Zero-out BSS */\n    lla s4, _bss_start\n    lla s5, _bss_end\n_bss_zero:\n    REG_S   zero, (s4)\n    add s4, s4, __SIZEOF_POINTER__\n    blt s4, s5, _bss_zero\n    /* Setup temporary trap handler */\n    lla s4, _start_hang\n    csrw    CSR_MTVEC, s4\n    /* Setup temporary stack */\n    lla s4, _fw_end\n    li  s5, (SBI_SCRATCH_SIZE * 2)\n    add sp, s4, s5\n    /* Allow main firmware to save info */\n    MOV_5R  s0, a0, s1, a1, s2, a2, s3, a3, s4, a4\n    call    fw_save_info\n    MOV_5R  a0, s0, a1, s1, a2, s2, a3, s3, a4, s4\n\n    /*\n    *   \u63a5\u4e0b\u6765\u5bf9\u8bbe\u5907\u6811\u8fdb\u884c\u5904\u7406\uff0c\u4e3b\u8981\u5728fw_platform_init()\u8fd9\u4e2aC\u51fd\u6570\u4e2d\u8fdb\u884c\u5904\u7406\uff0c\u7531\u4e0d\u540c\u7684platform\u51b3\u5b9a\n    */\n    #ifdef FW_FDT_PATH\n    /* Override previous arg1 */\n    lla a1, fw_fdt_bin\n    #endif\n    /*\n     * Initialize platform\n     * Note: The a0 to a4 registers passed to the\n     * firmware are parameters to this function.\n     */\n    MOV_5R  s0, a0, s1, a1, s2, a2, s3, a3, s4, a4\n    call    fw_platform_init\n    add t0, a0, zero\n    MOV_5R  a0, s0, a1, s1, a2, s2, a3, s3, a4, s4\n    add a1, t0, zero\n\n\n    /* \n     * \u63d0\u524d\u4ece\u5185\u5b58\u4e2d\u52a0\u8f7d\u6bcf\u4e2ahart\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u6765\u81ea\u4e4b\u524d\u7684fw_platform_init()\n     * Preload HART details\n     * s7 -&gt; HART Count\n     * s8 -&gt; HART Stack Size\n     * s9 -&gt; Heap Size\n     * s10 -&gt; Heap Offset\n     */\n    lla a4, platform\n#if __riscv_xlen &gt; 32\n    lwu s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4)\n    lwu s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4)\n    lwu s9, SBI_PLATFORM_HEAP_SIZE_OFFSET(a4)\n#else\n    lw  s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4)\n    lw  s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4)\n    lw  s9, SBI_PLATFORM_HEAP_SIZE_OFFSET(a4)\n#endif\n\n    /*  \u63a5\u4e0b\u6765\u4e3a\u6bcf\u4e2a\u6838\u5206\u914d\u5404\u81ea\u7684\u5806\u6808\u7b49\n     *  \u4e00\u7cfb\u5217\u521d\u59cb\u5316\uff0c\u5e76\u8c03\u7528fw_options()\u51fd\u6570\n     */\n    /* Setup scratch space for all the HARTs*/\n    lla tp, _fw_end\n    mul a5, s7, s8\n    add tp, tp, a5\n    /* Setup heap base address */\n    lla s10, _fw_start\n    sub s10, tp, s10\n    add tp, tp, s9\n    /* Keep a copy of tp */\n    add t3, tp, zero\n    /* Counter */\n    li  t2, 1\n    /* hartid 0 is mandated by ISA */\n    li  t1, 0\n_scratch_init:\n    /*\n     * The following registers hold values that are computed before\n     * entering this block, and should remain unchanged.\n     *\n     * t3 -&gt; the firmware end address\n     * s7 -&gt; HART count\n     * s8 -&gt; HART stack size\n     * s9 -&gt; Heap Size\n     * s10 -&gt; Heap Offset\n     */\n    add tp, t3, zero\n    sub tp, tp, s9\n    mul a5, s8, t1\n    sub tp, tp, a5\n    li  a5, SBI_SCRATCH_SIZE\n    sub tp, tp, a5\n\n    /* Initialize scratch space */\n    /* Store fw_start and fw_size in scratch space */\n    lla a4, _fw_start\n    sub a5, t3, a4\n    REG_S   a4, SBI_SCRATCH_FW_START_OFFSET(tp)\n    REG_S   a5, SBI_SCRATCH_FW_SIZE_OFFSET(tp)\n\n    /* Store R/W section's offset in scratch space */\n    lla a5, _fw_rw_start\n    sub a5, a5, a4\n    REG_S   a5, SBI_SCRATCH_FW_RW_OFFSET(tp)\n\n    /* Store fw_heap_offset and fw_heap_size in scratch space */\n    REG_S   s10, SBI_SCRATCH_FW_HEAP_OFFSET(tp)\n    REG_S   s9, SBI_SCRATCH_FW_HEAP_SIZE_OFFSET(tp)\n\n    /* Store next arg1 in scratch space */\n    MOV_3R  s0, a0, s1, a1, s2, a2\n    call    fw_next_arg1\n    REG_S   a0, SBI_SCRATCH_NEXT_ARG1_OFFSET(tp)\n    MOV_3R  a0, s0, a1, s1, a2, s2\n    /* Store next address in scratch space */\n    MOV_3R  s0, a0, s1, a1, s2, a2\n    call    fw_next_addr\n    REG_S   a0, SBI_SCRATCH_NEXT_ADDR_OFFSET(tp)\n    MOV_3R  a0, s0, a1, s1, a2, s2\n    /* Store next mode in scratch space */\n    MOV_3R  s0, a0, s1, a1, s2, a2\n    call    fw_next_mode\n    REG_S   a0, SBI_SCRATCH_NEXT_MODE_OFFSET(tp)\n    MOV_3R  a0, s0, a1, s1, a2, s2\n    /* Store warm_boot address in scratch space */\n    lla a4, _start_warm\n    REG_S   a4, SBI_SCRATCH_WARMBOOT_ADDR_OFFSET(tp)\n    /* Store platform address in scratch space */\n    lla a4, platform\n    REG_S   a4, SBI_SCRATCH_PLATFORM_ADDR_OFFSET(tp)\n    /* Store hartid-to-scratch function address in scratch space */\n    lla a4, _hartid_to_scratch\n    REG_S   a4, SBI_SCRATCH_HARTID_TO_SCRATCH_OFFSET(tp)\n    /* Store trap-exit function address in scratch space */\n    lla a4, _trap_exit\n    REG_S   a4, SBI_SCRATCH_TRAP_EXIT_OFFSET(tp)\n    /* Clear tmp0 in scratch space */\n    REG_S   zero, SBI_SCRATCH_TMP0_OFFSET(tp)\n    /* Store firmware options in scratch space */\n    MOV_3R  s0, a0, s1, a1, s2, a2\n#ifdef FW_OPTIONS\n    li  a0, FW_OPTIONS\n#else\n    call    fw_options\n#endif\n    REG_S   a0, SBI_SCRATCH_OPTIONS_OFFSET(tp)\n    MOV_3R  a0, s0, a1, s1, a2, s2\n    /* Move to next scratch space */\n    add t1, t1, t2\n    blt t1, s7, _scratch_init\n\n    /* \u63a5\u4e0b\u6765\u662fFDT\u8bbe\u5907\u6811\u7684\u91cd\u5b9a\u4f4d\uff0c\u4e0e\u56fa\u4ef6\u7684\u91cd\u5b9a\u4f4d\u76f8\u4f3c\uff0c\u6b64\u5904\u7701\u7565*/\n</code></pre> <p>\u5728\u5b8c\u6210\u6240\u6709\u7684\u57fa\u672c\u521d\u59cb\u5316\u3001\u4ee5\u53ca\u56fa\u4ef6\u548c\u8bbe\u5907\u6811\u7684\u91cd\u5b9a\u4f4d\u540e\uff0c\u8fdb\u884cboot\u7684hart\u4ee5\u53ca\u7b49\u5f85\u4e2d\u7684harts\u90fd\u8fdb\u5165\u4e0b\u4e00\u4e2a\u9636\u6bb5\uff0c_start_warm, \u5b8c\u6210\u8fd9\u4e2a\u9636\u6bb5\u540e\u5c31\u8fdb\u5165\u4e86C\u7f16\u5199\u7684\u9ad8\u7ea7\u8bed\u8a00\u4e16\u754c\uff0c\u4e0d\u7528\u770b\u6c47\u7f16\u4e86www\u3002</p> <p>\u8fd9\u4e2a\u9636\u6bb5\u4e3b\u8981\u505a\u4e86\u51e0\u4ef6\u5341\u5206\u91cd\u8981\u7684\u4e8b\u60c5\uff0c\u5305\u62ec\uff1a</p> <ul> <li>\u590d\u4f4d\u6240\u6709GPR\uff1b</li> <li>\u786e\u5b9a\u4e0d\u540chart\u7684\u5806\u6808\u5730\u5740\uff1b</li> <li>\u66f4\u65b0MSCRATH\u8fd9\u4e2aCSR\uff08\u4fdd\u5b58\u7684\u662ftp\u5bc4\u5b58\u5668\uff1f\uff1f\uff09\uff1b</li> <li>\u8bbe\u7f6e\u6b63\u5f0f\u7684trap\u5730\u5740\uff08\u5341\u5206\u91cd\u8981\uff01\uff01\uff01\uff09\uff0c\u51b3\u5b9a\u540e\u7eed\u7684\u5f02\u5e38\u5904\u7406\uff08\u5bf932\u4f4d\u5904\u7406\u5668\u7684Hypervisor\u6269\u5c55\u505a\u4e86\u5904\u7406\uff09\uff1b</li> <li>\u6700\u540e\u8df3\u8f6c\u81f3sbi_init()\u51fd\u6570\u8fdb\u884c\u4e0b\u4e00\u6b65\u7684\u521d\u59cb\u5316\u3002</li> </ul> <pre><code>_start_warm:\n    /* Reset all registers for non-boot HARTs */\n    li  ra, 0\n    call    _reset_regs\n\n    /* Disable all interrupts */\n    csrw    CSR_MIE, zero\n\n    /* Find HART count and HART stack size */\n    lla a4, platform\n#if __riscv_xlen == 64\n    lwu s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4)\n    lwu s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4)\n#else\n    lw  s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4)\n    lw  s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4)\n#endif\n    REG_L   s9, SBI_PLATFORM_HART_INDEX2ID_OFFSET(a4)\n\n    /* Find HART id */\n    csrr    s6, CSR_MHARTID\n\n    /* Find HART index */\n    beqz    s9, 3f\n    li  a4, 0\n1:\n#if __riscv_xlen == 64\n    lwu a5, (s9)\n#else\n    lw  a5, (s9)\n#endif\n    beq a5, s6, 2f\n    add s9, s9, 4\n    add a4, a4, 1\n    blt a4, s7, 1b\n2:  add s6, a4, zero\n3:  bge s6, s7, _start_hang\n\n    /* Find the scratch space based on HART index */\n    lla tp, _fw_end\n    mul a5, s7, s8\n    add tp, tp, a5\n    mul a5, s8, s6\n    sub tp, tp, a5\n    li  a5, SBI_SCRATCH_SIZE\n    sub tp, tp, a5\n\n    /* update the mscratch */\n    csrw    CSR_MSCRATCH, tp\n\n    /* Setup stack */\n    add sp, tp, zero\n\n    /* Setup trap handler */\n    lla a4, _trap_handler\n#if __riscv_xlen == 32\n    csrr    a5, CSR_MISA\n    srli    a5, a5, ('H' - 'A')\n    andi    a5, a5, 0x1\n    beq a5, zero, _skip_trap_handler_rv32_hyp\n    lla a4, _trap_handler_rv32_hyp\n_skip_trap_handler_rv32_hyp:\n#endif\n    csrw    CSR_MTVEC, a4\n\n#if __riscv_xlen == 32\n    /* Override trap exit for H-extension */\n    csrr    a5, CSR_MISA\n    srli    a5, a5, ('H' - 'A')\n    andi    a5, a5, 0x1\n    beq a5, zero, _skip_trap_exit_rv32_hyp\n    lla a4, _trap_exit_rv32_hyp\n    csrr    a5, CSR_MSCRATCH\n    REG_S   a4, SBI_SCRATCH_TRAP_EXIT_OFFSET(a5)\n_skip_trap_exit_rv32_hyp:\n#endif\n\n    /* Initialize SBI runtime */\n    csrr    a0, CSR_MSCRATCH\n    call    sbi_init\n\n    /* We don't expect to reach here hence just hang */\n    j   _start_hang\n</code></pre>"},{"location":"Linux/OpenSBI/#sbi_initc","title":"sbi_init.c","text":"<pre><code>\u5728\u8fd9\u91cc\u5b8c\u6210\u4e00\u7cfb\u5217\u521d\u59cb\u5316\u540e\uff0c\u901a\u8fc7`sbi_hart_switch_mode()`\u51fd\u6570\u8df3\u8f6c\u5230\u4e0b\u4e00boot\u9636\u6bb5\uff0c\u5e76\u8bbe\u7f6e\u597d\u673a\u5668\u72b6\u6001\uff08S\u3001U\uff09\u3002\n\n\u5177\u4f53\u53ef\u4ee5\u9605\u8bfb\u6e90\u4ee3\u7801\uff0cC\u8bed\u8a00\u76f8\u5bf9\u8f83\u4e3a\u7b80\u5355\uff0c\u4ee5\u540e\u6709\u65f6\u95f4\u518d\u8865\u5145\u5427\n</code></pre> <ol> <li>sdsad</li> <li>sdas</li> <li>dsadas</li> </ol>"},{"location":"Linux/OpenSBI/#_1","title":"\u9644\u5f55","text":"<p>[1]. \u539f\u5b50\u6307\u4ee4\uff1a\u6b64\u7c7b\u6307\u4ee4\u7528\u4e8e\u4ece\u5b58\u50a8\u5668\uff08\u5730\u5740\u4e3a rs1 \u5bc4\u5b58\u5668\u7684\u503c\u6307\u5b9a\uff09\u4e2d\u8bfb\u51fa\u4e00\u4e2a\u6570\u636e\uff0c\u5b58\u653e\u81f3 rd \u5bc4\u5b58\u5668\u4e2d\uff0c\u5e76\u4e14\u5c06\u8bfb\u51fa\u7684\u6570\u636e\u4e0e rs2 \u5bc4\u5b58\u5668\u7684\u503c\u8fdb\u884c\u8ba1\u7b97\uff0c\u518d\u5c06\u8ba1\u7b97\u540e\u7684\u7ed3\u679c\u5199\u56de\u5b58\u50a8\u5668\uff08\u5b58\u50a8\u5668\u5199\u56de\u5730\u5740\u4e0e\u8bfb\u51fa\u5730\u5740\u76f8\u540c\uff09\u3002</p> <p></p> <p>[2]. \u90e8\u5206\u5185\u5bb9\u53c2\u8003\uff1ahttps://blog.csdn.net/dai_xiangjun/article/details/131815433</p>"}]}