{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Linux/OpenSBI/","text":"\u57fa\u4e8eOpenSBI v1.3\u5bf9\u57fa\u672cboot\u6d41\u7a0b\u505a\u7b80\u8981\u89e3\u6790 fw_base.S OpenSBI\u4ece\u8fd9\u91cc\u8fdb\u5165\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e86 _start \u7b26\u53f7 (\u539f\u5b50\u6307\u4ee4\u53c2\u8003[1]) \uff1a .section .entry, \"ax\", %progbits .align 3 .globl _start .globl _start_warm _start: /* Find preferred boot HART id */ MOV_3R s0, a0, s1, a1, s2, a2 call fw_boot_hart //\u8fd9\u91cc\u6839\u636e\u6240\u9009\u62e9\u7684\u56fa\u4ef6\u7c7b\u578b\uff08jump\u3001dynamic\u3001payload\u51b3\u5b9a\uff09\uff0c\u5bf9\u4e8edynamic\u8fd4\u56de\u6267\u884cboot\u7684hartid\uff0c\u5176\u4ed6\u8fd4\u56de-1\uff1b add a6, a0, zero MOV_3R a0, s0, a1, s1, a2, s2 li a7, -1 beq a6, a7, _try_lottery //\u5982\u679c\u662fjump\u6216payload\u56fa\u4ef6\uff0c\u5219\u5c1d\u8bd5\u5f69\u7968\u7b97\u6cd5\u51b3\u5b9a\u6267\u884cboot\u7684hart /* Jump to relocation wait loop if we are not boot hart */ bne a0, a6, _wait_relocate_copy_done _try_lottery: /*2. \u539f\u5b50\u5199\u64cd\u4f5c\uff1a\u5148\u5c06(a6)\u4e2d\u7684\u5185\u5bb9\u8bb0\u4e3at\uff0c\u7136\u540e\u5c06a7+t\u7684\u5185\u5bb9\u5199\u5165(a6),\u7136\u540e\u628at\u5199\u5165a6 * \u5148\u6267\u884c\u7684hart\uff1aa7 \u4e3a 1\uff0c (a6) = _relocate_lottery = 1\uff0ca6=0 * \u540e\u6267\u884c\u7684hart\uff1a\u7531\u4e8e\u6bcf\u4e2acpu\u90fd\u6709\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u6240\u4ee5\u6b64\u65f6\u5f53\u524dcpu\u7684a6\u4f9d\u7136\u4e3a_relocate_lottery\u5730\u5740\uff0c\u4f46\u662f(a6)\u7684\u503c\u4e3a1\uff0c * \u6267\u884c\u540e a7\u4e3a1\uff0ca6) = _relocate_lottery = 2\uff0ca6=1 * \u603b\u7ed3\uff1a\u5148\u6267\u884camoadd.w a6, a7, (a6)\u6307\u4ee4\u7684cpu\u4f1a\u6210\u4e3a\u51b7\u542f\u52a8\u7684cpu\uff0c\u5176\u4ed6cpu\u4f1a\u8df3\u8f6c\u5230_wait_relocate_copy_done\u7b49\u5f85 */ /* Jump to relocation wait loop if we don't get relocation lottery */ lla a6, _relocate_lottery li a7, 1 amoadd.w a6, a7, (a6) bnez a6, _wait_relocate_copy_done /*\u83b7\u53d6SBI\u56fa\u4ef6\u81ea\u8eab\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u4ee5\u53ca\u5c06\u8981load\u7684\u5730\u5740*/ /* Save load address */ lla t0, _load_start lla t1, _fw_start REG_S t1, 0(t0) \u63a5\u4e0b\u6765\u8fdb\u884cOpenSBI\u56fa\u4ef6\u7684\u4ece\u5b9a\u4f4d\uff1a #ifdef FW_PIC \u00b7\u00b7\u00b7 //\u7531\u4e8e\u672a\u4f7f\u7528\u52a8\u6001\u94fe\u63a5\uff0c\u6b64\u5904\u4e0d\u8fc7\u591a\u4ecb\u7ecd #else /*\u6b64\u5904\u7531\u4e4b\u524d\u901a\u8fc7\u5f69\u7968\u7b97\u6cd5\u51b3\u5b9a\u7684hart\u8fdb\u884c\u91cd\u5b9a\u4f4d\uff0c\u5176\u4ed6hart\u8fdb\u5165_wait_for_boot_hart\u7b49\u5f85*/ /* Relocate if load address != link address */ _relocate: lla t0, _link_start REG_L t0, 0(t0) lla t1, _link_end REG_L t1, 0(t1) lla t2, _load_start REG_L t2, 0(t2) beq t0, t2, _relocate_done sub t3, t1, t0 add t3, t3, t2 lla t4, _relocate_done sub t4, t4, t2 add t4, t4, t0 blt t2, t0, _relocate_copy_to_upper _relocate_copy_to_lower: ble t1, t2, _relocate_copy_to_lower_loop lla t3, _relocate_lottery BRANGE t2, t1, t3, _start_hang lla t3, _boot_status BRANGE t2, t1, t3, _start_hang lla t3, _relocate lla t5, _relocate_done BRANGE t2, t1, t3, _start_hang BRANGE t2, t1, t5, _start_hang BRANGE t3, t5, t2, _start_hang _relocate_copy_to_lower_loop: REG_L t3, 0(t2) REG_S t3, 0(t0) add t0, t0, __SIZEOF_POINTER__ add t2, t2, __SIZEOF_POINTER__ blt t0, t1, _relocate_copy_to_lower_loop jr t4 _relocate_copy_to_upper: ble t3, t0, _relocate_copy_to_upper_loop lla t2, _relocate_lottery BRANGE t0, t3, t2, _start_hang lla t2, _boot_status BRANGE t0, t3, t2, _start_hang lla t2, _relocate lla t5, _relocate_done BRANGE t0, t3, t2, _start_hang BRANGE t0, t3, t5, _start_hang BRANGE t2, t5, t0, _start_hang _relocate_copy_to_upper_loop: add t3, t3, -__SIZEOF_POINTER__ add t1, t1, -__SIZEOF_POINTER__ REG_L t2, 0(t3) REG_S t2, 0(t1) blt t0, t1, _relocate_copy_to_upper_loop jr t4 _wait_relocate_copy_done: lla t0, _fw_start lla t1, _link_start REG_L t1, 0(t1) beq t0, t1, _wait_for_boot_hart lla t2, _boot_status lla t3, _wait_for_boot_hart sub t3, t3, t0 add t3, t3, t1 1: /* waitting for relocate copy done (_boot_status == 1) */ li t4, BOOT_STATUS_RELOCATE_DONE REG_L t5, 0(t2) /* Reduce the bus traffic so that boot hart may proceed faster */ nop nop nop bgt t4, t5, 1b jr t3 #endif /* waiting for boot hart to be done (_boot_status == 2) */ _wait_for_boot_hart: li t0, BOOT_STATUS_BOOT_HART_DONE lla t1, _boot_status REG_L t1, 0(t1) /* Reduce the bus traffic so that boot hart may proceed faster */ div t2, t2, zero div t2, t2, zero div t2, t2, zero bne t0, t1, _wait_for_boot_hart _start_warm: /* Reset all registers for non-boot HARTs */ li ra, 0 call _reset_regs /* Disable all interrupts */ csrw CSR_MIE, zero /* Find HART count and HART stack size */ lla a4, platform #if __riscv_xlen == 64 lwu s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4) lwu s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4) #else lw s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4) lw s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4) #endif REG_L s9, SBI_PLATFORM_HART_INDEX2ID_OFFSET(a4) /* Find HART id */ csrr s6, CSR_MHARTID /* Find HART index */ beqz s9, 3f li a4, 0 1: #if __riscv_xlen == 64 lwu a5, (s9) #else lw a5, (s9) #endif beq a5, s6, 2f add s9, s9, 4 add a4, a4, 1 blt a4, s7, 1b 2: add s6, a4, zero 3: bge s6, s7, _start_hang /* Find the scratch space based on HART index */ lla tp, _fw_end mul a5, s7, s8 add tp, tp, a5 mul a5, s8, s6 sub tp, tp, a5 li a5, SBI_SCRATCH_SIZE sub tp, tp, a5 /* update the mscratch */ csrw CSR_MSCRATCH, tp /* Setup stack */ add sp, tp, zero /* Setup trap handler */ lla a4, _trap_handler #if __riscv_xlen == 32 csrr a5, CSR_MISA srli a5, a5, ('H' - 'A') andi a5, a5, 0x1 beq a5, zero, _skip_trap_handler_rv32_hyp lla a4, _trap_handler_rv32_hyp _skip_trap_handler_rv32_hyp: #endif csrw CSR_MTVEC, a4 #if __riscv_xlen == 32 /* Override trap exit for H-extension */ csrr a5, CSR_MISA srli a5, a5, ('H' - 'A') andi a5, a5, 0x1 beq a5, zero, _skip_trap_exit_rv32_hyp lla a4, _trap_exit_rv32_hyp csrr a5, CSR_MSCRATCH REG_S a4, SBI_SCRATCH_TRAP_EXIT_OFFSET(a5) _skip_trap_exit_rv32_hyp: #endif /* Initialize SBI runtime */ csrr a0, CSR_MSCRATCH call sbi_init /* We don't expect to reach here hence just hang */ j _start_hang \u9644\u5f55 [1] . \u539f\u5b50\u6307\u4ee4\uff1a\u6b64\u7c7b\u6307\u4ee4\u7528\u4e8e\u4ece \u5b58\u50a8\u5668 \uff08\u5730\u5740\u4e3a rs1 \u5bc4\u5b58\u5668\u7684\u503c\u6307\u5b9a\uff09\u4e2d\u8bfb\u51fa\u4e00\u4e2a\u6570\u636e\uff0c\u5b58\u653e\u81f3 rd \u5bc4\u5b58\u5668\u4e2d\uff0c\u5e76\u4e14\u5c06\u8bfb\u51fa\u7684\u6570\u636e\u4e0e rs2 \u5bc4\u5b58\u5668\u7684\u503c\u8fdb\u884c\u8ba1\u7b97\uff0c\u518d\u5c06\u8ba1\u7b97\u540e\u7684\u7ed3\u679c\u5199\u56de\u5b58\u50a8\u5668\uff08\u5b58\u50a8\u5668\u5199\u56de\u5730\u5740\u4e0e\u8bfb\u51fa\u5730\u5740\u76f8\u540c\uff09\u3002","title":"OpenSBI"},{"location":"Linux/OpenSBI/#fw_bases","text":"OpenSBI\u4ece\u8fd9\u91cc\u8fdb\u5165\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e86 _start \u7b26\u53f7 (\u539f\u5b50\u6307\u4ee4\u53c2\u8003[1]) \uff1a .section .entry, \"ax\", %progbits .align 3 .globl _start .globl _start_warm _start: /* Find preferred boot HART id */ MOV_3R s0, a0, s1, a1, s2, a2 call fw_boot_hart //\u8fd9\u91cc\u6839\u636e\u6240\u9009\u62e9\u7684\u56fa\u4ef6\u7c7b\u578b\uff08jump\u3001dynamic\u3001payload\u51b3\u5b9a\uff09\uff0c\u5bf9\u4e8edynamic\u8fd4\u56de\u6267\u884cboot\u7684hartid\uff0c\u5176\u4ed6\u8fd4\u56de-1\uff1b add a6, a0, zero MOV_3R a0, s0, a1, s1, a2, s2 li a7, -1 beq a6, a7, _try_lottery //\u5982\u679c\u662fjump\u6216payload\u56fa\u4ef6\uff0c\u5219\u5c1d\u8bd5\u5f69\u7968\u7b97\u6cd5\u51b3\u5b9a\u6267\u884cboot\u7684hart /* Jump to relocation wait loop if we are not boot hart */ bne a0, a6, _wait_relocate_copy_done _try_lottery: /*2. \u539f\u5b50\u5199\u64cd\u4f5c\uff1a\u5148\u5c06(a6)\u4e2d\u7684\u5185\u5bb9\u8bb0\u4e3at\uff0c\u7136\u540e\u5c06a7+t\u7684\u5185\u5bb9\u5199\u5165(a6),\u7136\u540e\u628at\u5199\u5165a6 * \u5148\u6267\u884c\u7684hart\uff1aa7 \u4e3a 1\uff0c (a6) = _relocate_lottery = 1\uff0ca6=0 * \u540e\u6267\u884c\u7684hart\uff1a\u7531\u4e8e\u6bcf\u4e2acpu\u90fd\u6709\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u6240\u4ee5\u6b64\u65f6\u5f53\u524dcpu\u7684a6\u4f9d\u7136\u4e3a_relocate_lottery\u5730\u5740\uff0c\u4f46\u662f(a6)\u7684\u503c\u4e3a1\uff0c * \u6267\u884c\u540e a7\u4e3a1\uff0ca6) = _relocate_lottery = 2\uff0ca6=1 * \u603b\u7ed3\uff1a\u5148\u6267\u884camoadd.w a6, a7, (a6)\u6307\u4ee4\u7684cpu\u4f1a\u6210\u4e3a\u51b7\u542f\u52a8\u7684cpu\uff0c\u5176\u4ed6cpu\u4f1a\u8df3\u8f6c\u5230_wait_relocate_copy_done\u7b49\u5f85 */ /* Jump to relocation wait loop if we don't get relocation lottery */ lla a6, _relocate_lottery li a7, 1 amoadd.w a6, a7, (a6) bnez a6, _wait_relocate_copy_done /*\u83b7\u53d6SBI\u56fa\u4ef6\u81ea\u8eab\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u4ee5\u53ca\u5c06\u8981load\u7684\u5730\u5740*/ /* Save load address */ lla t0, _load_start lla t1, _fw_start REG_S t1, 0(t0) \u63a5\u4e0b\u6765\u8fdb\u884cOpenSBI\u56fa\u4ef6\u7684\u4ece\u5b9a\u4f4d\uff1a #ifdef FW_PIC \u00b7\u00b7\u00b7 //\u7531\u4e8e\u672a\u4f7f\u7528\u52a8\u6001\u94fe\u63a5\uff0c\u6b64\u5904\u4e0d\u8fc7\u591a\u4ecb\u7ecd #else /*\u6b64\u5904\u7531\u4e4b\u524d\u901a\u8fc7\u5f69\u7968\u7b97\u6cd5\u51b3\u5b9a\u7684hart\u8fdb\u884c\u91cd\u5b9a\u4f4d\uff0c\u5176\u4ed6hart\u8fdb\u5165_wait_for_boot_hart\u7b49\u5f85*/ /* Relocate if load address != link address */ _relocate: lla t0, _link_start REG_L t0, 0(t0) lla t1, _link_end REG_L t1, 0(t1) lla t2, _load_start REG_L t2, 0(t2) beq t0, t2, _relocate_done sub t3, t1, t0 add t3, t3, t2 lla t4, _relocate_done sub t4, t4, t2 add t4, t4, t0 blt t2, t0, _relocate_copy_to_upper _relocate_copy_to_lower: ble t1, t2, _relocate_copy_to_lower_loop lla t3, _relocate_lottery BRANGE t2, t1, t3, _start_hang lla t3, _boot_status BRANGE t2, t1, t3, _start_hang lla t3, _relocate lla t5, _relocate_done BRANGE t2, t1, t3, _start_hang BRANGE t2, t1, t5, _start_hang BRANGE t3, t5, t2, _start_hang _relocate_copy_to_lower_loop: REG_L t3, 0(t2) REG_S t3, 0(t0) add t0, t0, __SIZEOF_POINTER__ add t2, t2, __SIZEOF_POINTER__ blt t0, t1, _relocate_copy_to_lower_loop jr t4 _relocate_copy_to_upper: ble t3, t0, _relocate_copy_to_upper_loop lla t2, _relocate_lottery BRANGE t0, t3, t2, _start_hang lla t2, _boot_status BRANGE t0, t3, t2, _start_hang lla t2, _relocate lla t5, _relocate_done BRANGE t0, t3, t2, _start_hang BRANGE t0, t3, t5, _start_hang BRANGE t2, t5, t0, _start_hang _relocate_copy_to_upper_loop: add t3, t3, -__SIZEOF_POINTER__ add t1, t1, -__SIZEOF_POINTER__ REG_L t2, 0(t3) REG_S t2, 0(t1) blt t0, t1, _relocate_copy_to_upper_loop jr t4 _wait_relocate_copy_done: lla t0, _fw_start lla t1, _link_start REG_L t1, 0(t1) beq t0, t1, _wait_for_boot_hart lla t2, _boot_status lla t3, _wait_for_boot_hart sub t3, t3, t0 add t3, t3, t1 1: /* waitting for relocate copy done (_boot_status == 1) */ li t4, BOOT_STATUS_RELOCATE_DONE REG_L t5, 0(t2) /* Reduce the bus traffic so that boot hart may proceed faster */ nop nop nop bgt t4, t5, 1b jr t3 #endif /* waiting for boot hart to be done (_boot_status == 2) */ _wait_for_boot_hart: li t0, BOOT_STATUS_BOOT_HART_DONE lla t1, _boot_status REG_L t1, 0(t1) /* Reduce the bus traffic so that boot hart may proceed faster */ div t2, t2, zero div t2, t2, zero div t2, t2, zero bne t0, t1, _wait_for_boot_hart _start_warm: /* Reset all registers for non-boot HARTs */ li ra, 0 call _reset_regs /* Disable all interrupts */ csrw CSR_MIE, zero /* Find HART count and HART stack size */ lla a4, platform #if __riscv_xlen == 64 lwu s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4) lwu s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4) #else lw s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4) lw s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4) #endif REG_L s9, SBI_PLATFORM_HART_INDEX2ID_OFFSET(a4) /* Find HART id */ csrr s6, CSR_MHARTID /* Find HART index */ beqz s9, 3f li a4, 0 1: #if __riscv_xlen == 64 lwu a5, (s9) #else lw a5, (s9) #endif beq a5, s6, 2f add s9, s9, 4 add a4, a4, 1 blt a4, s7, 1b 2: add s6, a4, zero 3: bge s6, s7, _start_hang /* Find the scratch space based on HART index */ lla tp, _fw_end mul a5, s7, s8 add tp, tp, a5 mul a5, s8, s6 sub tp, tp, a5 li a5, SBI_SCRATCH_SIZE sub tp, tp, a5 /* update the mscratch */ csrw CSR_MSCRATCH, tp /* Setup stack */ add sp, tp, zero /* Setup trap handler */ lla a4, _trap_handler #if __riscv_xlen == 32 csrr a5, CSR_MISA srli a5, a5, ('H' - 'A') andi a5, a5, 0x1 beq a5, zero, _skip_trap_handler_rv32_hyp lla a4, _trap_handler_rv32_hyp _skip_trap_handler_rv32_hyp: #endif csrw CSR_MTVEC, a4 #if __riscv_xlen == 32 /* Override trap exit for H-extension */ csrr a5, CSR_MISA srli a5, a5, ('H' - 'A') andi a5, a5, 0x1 beq a5, zero, _skip_trap_exit_rv32_hyp lla a4, _trap_exit_rv32_hyp csrr a5, CSR_MSCRATCH REG_S a4, SBI_SCRATCH_TRAP_EXIT_OFFSET(a5) _skip_trap_exit_rv32_hyp: #endif /* Initialize SBI runtime */ csrr a0, CSR_MSCRATCH call sbi_init /* We don't expect to reach here hence just hang */ j _start_hang","title":"fw_base.S"},{"location":"Linux/OpenSBI/#_1","text":"[1] . \u539f\u5b50\u6307\u4ee4\uff1a\u6b64\u7c7b\u6307\u4ee4\u7528\u4e8e\u4ece \u5b58\u50a8\u5668 \uff08\u5730\u5740\u4e3a rs1 \u5bc4\u5b58\u5668\u7684\u503c\u6307\u5b9a\uff09\u4e2d\u8bfb\u51fa\u4e00\u4e2a\u6570\u636e\uff0c\u5b58\u653e\u81f3 rd \u5bc4\u5b58\u5668\u4e2d\uff0c\u5e76\u4e14\u5c06\u8bfb\u51fa\u7684\u6570\u636e\u4e0e rs2 \u5bc4\u5b58\u5668\u7684\u503c\u8fdb\u884c\u8ba1\u7b97\uff0c\u518d\u5c06\u8ba1\u7b97\u540e\u7684\u7ed3\u679c\u5199\u56de\u5b58\u50a8\u5668\uff08\u5b58\u50a8\u5668\u5199\u56de\u5730\u5740\u4e0e\u8bfb\u51fa\u5730\u5740\u76f8\u540c\uff09\u3002","title":"\u9644\u5f55"},{"location":"infos/about/","text":"","title":"About"},{"location":"infos/license/","text":"","title":"License"}]}